<?php
/**
 *  Implementation of hook_menu()
 */

function confirm_popup_menu(){

  //Menu to handle ajax request for the confirmation form
  $items['confirm_popup/%ctools_js'] = array(
    'title' => 'cajaxform',
    'page callback' => 'confirm_popup_ajax_callback',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * common jquery ui .dialog() options
 */
function confirm_popup_dialog_options(){
  return array(
    'width' => '1000',
    'position' => array(
      'center',
      'center'
    ),
    'show' => 'slide, {direction: "down"},1000',
    'resizable' => FALSE,
    'closeText' => 'Close',
  );
}

/**
 * Implementation of hook_preprocess_page.
 * Scans the entire page for links with confirm_popup
 * in the path, then adds the necessary classes for modal
 * functionality.
 */
function confirm_popup_preprocess_page(&$vars) {

	ctools_include('ajax');
	ctools_include('modal');
	ctools_modal_add_js();
	dialog_add_js();
	_confirm_popup_modal_settings();
}

/**
 *  Callback function to handle ajax request.
 *  Runs path through ctools functions to get
 *  a modal form. If the function isn't a form,
 *  it just passes on through. If hasn't been called
 *  via AJAX, it just passes through.
 */
function confirm_popup_ajax_callback(){
  // the entire path will be confirm_popup/(nojs|ajax)/path/to/other/page
  $args = func_get_args();
  $js = array_shift($args);
  $path = implode('/', $args);
  if ($js) {
    if ($router_item = menu_get_item($path)) {
      if ($router_item['access']) {
        if ($router_item['file']) {
          require_once($router_item['file']);
        }

        // Include the CTools tools that we need.
        ctools_include('ajax');
        ctools_include('modal');
        ctools_modal_add_js();
        dialog_add_js();

        // we're loading a form into a modal popup.
        if ($router_item['page_callback'] == 'drupal_get_form') {
          // get the form id from the page arguments
          $form_id = array_shift($router_item['page_arguments']);
          $form_state = array(
            'title' => $router_item['title'],
            'ajax' => TRUE,
            'confirm_popup' => TRUE,
            // stuff the rest of the arguments into form_state,
            // since that's where they need to be for ctools to work
        		'args' => $router_item['page_arguments'],
          );

          // get the ctools page now
          $output = dialog_form_wrapper($form_id, $form_state);
          if (empty($output)) {
            // empty $output signifies we're not rendering a form, so we'll use it as our $commands
            // array.
            $output = array();
          //  $message =  theme('status_messages');
          //  $output[] = ctools_modal_command_display(t('Message'), "<div>".$message."</div>");
            if ($form_state['values']['op'] == 'Cancel') {
              $output[] = dialog_command_dismiss();
            }
            elseif (isset($form_state['values']['op'])) {
              // this could be anything, really.
              if (isset($form_state['redirect'])) {
                $output[] = ctools_ajax_command_redirect($form_state['redirect'], 0);
              }
              else {
                $output[] = ctools_ajax_command_reload();
              }
            }
          }
          else {
            foreach ( $output as $i => $command ) {
              if ($command['command'] == 'dialog_display') {
                $output[$i]['options'] = confirm_popup_dialog_options();
              }
            }
          }
        }
        else {
          // this isn't a form at all! Or it's some wierd form that doesn't use drupal_get_form the way we
          // expect it to. Just let them deal with it.
          $output = call_user_func_array($router_item['page_callback'], $router_item['page_arguments']);
        }
        ctools_ajax_render($output);
      }
      else {
        return MENU_ACCESS_DENIED;
      }
    }
    return MENU_NOT_FOUND;
  }
  else {
    // we're not rendering with js. just load the page as if we were never here.
    return menu_execute_active_handler($path);
  }
}

/**
 * Implementation of hook_confirm_popup_paths.
 * Done on node's behalf.
 */
function node_confirm_popup_paths() {
  return array(
    'node/%/delete',
  );
}

/**
 * Implementation of hook_form_alter
 * Change the Cancel link on the form into a proper button
 */
function confirm_popup_form_alter(&$form, &$form_state, $form_id) {
  if ($form_state['confirm_popup']) {
    $form['title'] = array(
      '#type' => 'markup',
      '#value' => drupal_set_title()."<br>",
      '#weight' => -1,
    );

    unset($form['actions']['cancel']);

    /*
    $form['actions']['cancel'] = array(
      '#type' => 'submit',
      '#value' => 'Cancel',
    );
    */

    $form['#popup_submit'] = $form['#submit'];
    $form['#submit'] = array('confirm_popup_submit');
  }
}

/**
 * Wrapper for existing submit functions
 * Allows us to check to see the user confirmed the action
 * before sending it to the real submit handlers
 */
function confirm_popup_submit($form, &$form_state) {
  if ($form_state['values']['op'] == 'Cancel') {
    return;
  }
  else {
    foreach ($form['#popup_submit'] as $callback) {
      if (function_exists($callback)) {
        $callback($form, $form_state);
      }
    }
  }
}

function _confirm_popup_modal_settings() {
  $vsite = vsite_get_vsite();

  $s_base_path = '';//$GLOBALS['base_path'];
  if($vsite->purl_provider == "spaces_og"){
    $s_base_path .= $vsite->group->purl."/";
  }

  $vsite_domain = variable_get('vsite_domain_name',false);
  if($vsite_domain){
    $s_base_domain = "http://".$vsite_domain;
  }else{
    global $base_url;
    $s_base_domain = variable_get('purl_base_domain', $base_url);
  }

  drupal_add_js(array(

    'confirm_popup' => array("links" => drupal_to_js(_confirm_popup_get_confirm_paths()),
                             "base_path" => $s_base_path,
                             "base_domain" => $s_base_domain),
  ), 'setting');

  static $init = false;
  if (!$init) {
    // TODO: refactor so it only loops through all the links in a page once.
    drupal_add_js(drupal_get_path('module', 'confirm_popup').'/confirm_popup.js','module');
    $init = true;
  }
}

function _confirm_popup_get_confirm_paths() {
  static $paths;

  if (!isset($paths)) {
    $paths = module_invoke_all('confirm_popup_paths');
  }

  return $paths;
}
