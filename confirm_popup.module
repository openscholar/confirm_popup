<?php
/**
 *  Implementation of hook_menu()
 */

function confirm_popup_menu(){

  //Menu to handle ajax request for the confirmation form
  $items['confirm_popup/%ctools_js'] = array(
    'title' => 'cajaxform',
    'page callback' => 'confirm_popup_ajax_callback',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 *  Function to preprocess link to add ctools processed class
 */
function confirm_popup_modal_link($text, $link, $alt){
	ctools_include('ajax');
	ctools_include('modal');
	ctools_modal_add_js();
	_confirm_popup_modal_settings();

	return ctools_modal_text_button(t($text), 'confirm_popup/nojs/'.$link, t($alt), 'ctools-modal-confirm-popup-modal');
}

/**
 * Implementation of hook_preprocess_page.
 * Scans the entire page for links with confirm_popup
 * in the path, then adds the necessary classes for modal
 * functionality.
 */
function confirm_popup_preprocess_page(&$variables) {

	ctools_include('ajax');
	ctools_include('modal');
	ctools_modal_add_js();
	_confirm_popup_modal_settings();
}
/*  $pattern = '~<a[.]* href="(.*)"[^>]*>(.*)</a>~iU';

  foreach ($variables as &$data) {
    if (!is_string($data)) continue;
    preg_match_all($pattern, $data, $matches, PREG_SET_ORDER);

    foreach ($matches as $k => $link) {
      if (strpos($link[1], 'confirm_popup') !== FALSE) {
        $patt_class = '~class="([^"]*)"~i';
        $count = preg_match($patt_class, $link[0], $class_orig);
        if ($count) {
          // the class tag exists already
          $class = explode(' ', $class_orig[1]);
          if (!in_array('ctools-use-modal', $class)) {
            $class[] = 'ctools-use-modal';
            $class[] = 'ctools-modal-confirm-popup-modal';
            $class = implode(' ', $class);
            $final = str_replace($class_orig[1], $class, $link[0]);
            $data = str_replace($link[0], $final, $data);
          }
        }
        else {
          // the class tag doesn't exist. we need to add it.
          $final = str_replace('">', '" class="ctools-use-modal ctools-modal-confirm-popup-modal">', $link[0]);
          $data = str_replace($link[0], $final, $data);
        }
      }
    }
  }
}*/

/**
 *  Callback function to handle ajax request.
 *  Runs path through ctools functions to get
 *  a modal form. If the function isn't a form,
 *  it just passes on through. If hasn't been called
 *  via AJAX, it just passes through.
 */
function confirm_popup_ajax_callback(){
  // the entire path will be confirm_popup/(nojs|ajax)/path/to/other/page
  $args = func_get_args();
  $js = array_shift($args);
  $path = implode('/', $args);
  if ($js) {
    if ($router_item = menu_get_item($path)) {
      if ($router_item['access']) {
        if ($router_item['file']) {
          require_once($router_item['file']);
        }

        // Include the CTools tools that we need.
        ctools_include('ajax');
        ctools_include('modal');
        ctools_modal_add_js();

        // we're loading a form into a modal popup.
        if ($router_item['page_callback'] == 'drupal_get_form') {
          // get the form id from the page arguments
          $form_id = array_shift($router_item['page_arguments']);
          $form_state = array(
            'title' => $router_item['title'],
            'ajax' => TRUE,
            'confirm_popup' => TRUE,
            // stuff the rest of the arguments into form_state,
            // since that's where they need to be for ctools to work
        		'args' => $router_item['page_arguments'],
          );

          // get the ctools page now
          $output = ctools_modal_form_wrapper($form_id, $form_state);
          $refresh = FALSE;
          if (empty($output)) {
            // empty $output signifies we're not rendering a form, so we'll use it as our $commands
            // array.
            $output = array();
          //  $message =  theme('status_messages');
          //  $output[] = ctools_modal_command_display(t('Message'), "<div>".$message."</div>");
            if ($form_state['values']['op'] == 'Cancel') {
              $output[] = ctools_modal_command_dismiss();
            }
            elseif (isset($form_state['values']['op'])) {
              // this could be anything, really.
              $output[] = ctools_ajax_command_reload();
            }
          }
        }
        else {
          // this isn't a form at all! Or it's some wierd form that doesn't use drupal_get_form the way we
          // expect it to. Just let them deal with it.
          $output = call_user_func_array($router_item['page_callback'], $router_item['page_arguments']);
        }
        ctools_ajax_render($output);
      }
      else {
        return MENU_ACCESS_DENIED;
      }
    }
    return MENU_NOT_FOUND;
  }
  else {
    // we're not rendering with js. just load the page as if we were never here.
    return menu_execute_active_handler($path);
  }
}

/**
 * Implementation of hook_confirm_popup_paths.
 * Done on node's behalf.
 */
function node_confirm_popup_paths() {
  return array(
    'node/%/delete',
  );
}

/**
 * Implementation of hook_form_alter
 * Change the Cancel link on the form into a proper button
 */
function confirm_popup_form_alter(&$form, &$form_state, $form_id) {
  if ($form_state['confirm_popup']) {
    $form['actions']['cancel'] = array(
      '#type' => 'submit',
      '#value' => 'Cancel',
    );

    $form['#popup_submit'] = $form['#submit'];
    $form['#submit'] = array('confirm_popup_submit');
  }
}

/**
 * Wrapper for existing submit functions
 * Allows us to check to see the user confirmed the action
 * before sending it to the real submit handlers
 */
function confirm_popup_submit($form, &$form_state) {
  if ($form_state['values']['op'] == 'Cancel') {
    return;
  }
  else {
    foreach ($form['#popup_submit'] as $callback) {
      if (function_exists($callback)) {
        $callback($form, $form_state);
      }
    }
  }
}

/**
 * Implementation of hook_purl_processor.
 */
function confirm_popup_purl_processor() {
  $info = array();
  $info['purl_confirm_popup_path'] = array(
    'title' => t('Confirm Popup Path'),
    'handler' => array(
      'class' => 'purl_confirm_popup_path',
      'file' => 'confirm_popup_purl_path.inc',
      'path' => drupal_get_path('module', 'confirm_popup'),
      'parent' => 'path',
    ),
  );

  return $info;
}

function _confirm_popup_modal_settings() {
  drupal_add_js(array(
    'confirm-popup-modal' => array(
      'modalSize' => array(
        'type' => 'fixed',
        'width' => 250,
        'height' => 200,
      ),
    ),
    'confirm_popup_links' => drupal_to_js(_confirm_popup_get_confirm_paths()),
  ), 'setting');

  static $init = false;
  if (!$init) {
    drupal_add_js('
    	Drupal.behaviors.confirm_popup = function () {
    		Drupal.settings.confirm_popup_links = eval(Drupal.settings.confirm_popup_links);
    	  $.each(Drupal.settings.confirm_popup_links, function (i, item) {
    	  	// for every path we check against
    	  	var frags = item.split("%");
    	  	var links = $("body a");
    	  	$.each(frags, function (i, item) {
    	  		// filter the list of links by the path fragment
    	  		links = links.filter("[href*="+item+"]");
    	  	});

    	  	var path = Drupal.settings.basePath+Drupal.settings.og.group_context.title+"/";
    			links.each(function (i, item) {
    				// add in the necessary path bits and classes
    				item.href = item.href.replace(path, path+"confirm_popup/nojs/");
    				item.className += " ctools-use-modal ctools-modal-confirm-popup-modal";
    			});
    	  });

    	  // tell ctools to go. We don\'t know if ctools has already processed or not.
      	Drupal.behaviors.ZZCToolsModal();
      }'
      ,'inline');
    $init = true;
  }
}

function _confirm_popup_get_confirm_paths() {
  static $paths;

  if (!isset($paths)) {
    $paths = module_invoke_all('confirm_popup_paths');
  }

  return $paths;
}
